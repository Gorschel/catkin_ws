// Generated by gencpp from file twophase_solver_ros/SolverRequest.msg
// DO NOT EDIT!


#ifndef TWOPHASE_SOLVER_ROS_MESSAGE_SOLVERREQUEST_H
#define TWOPHASE_SOLVER_ROS_MESSAGE_SOLVERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twophase_solver_ros
{
template <class ContainerAllocator>
struct SolverRequest_
{
  typedef SolverRequest_<ContainerAllocator> Type;

  SolverRequest_()
    : defstr()  {
    }
  SolverRequest_(const ContainerAllocator& _alloc)
    : defstr(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _defstr_type;
  _defstr_type defstr;





  typedef boost::shared_ptr< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SolverRequest_

typedef ::twophase_solver_ros::SolverRequest_<std::allocator<void> > SolverRequest;

typedef boost::shared_ptr< ::twophase_solver_ros::SolverRequest > SolverRequestPtr;
typedef boost::shared_ptr< ::twophase_solver_ros::SolverRequest const> SolverRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twophase_solver_ros::SolverRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twophase_solver_ros::SolverRequest_<ContainerAllocator1> & lhs, const ::twophase_solver_ros::SolverRequest_<ContainerAllocator2> & rhs)
{
  return lhs.defstr == rhs.defstr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twophase_solver_ros::SolverRequest_<ContainerAllocator1> & lhs, const ::twophase_solver_ros::SolverRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twophase_solver_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "def6775a2c5fbf7096579b2d03edfae5";
  }

  static const char* value(const ::twophase_solver_ros::SolverRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdef6775a2c5fbf70ULL;
  static const uint64_t static_value2 = 0x96579b2d03edfae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twophase_solver_ros/SolverRequest";
  }

  static const char* value(const ::twophase_solver_ros::SolverRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string defstr\n"
;
  }

  static const char* value(const ::twophase_solver_ros::SolverRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.defstr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolverRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twophase_solver_ros::SolverRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twophase_solver_ros::SolverRequest_<ContainerAllocator>& v)
  {
    s << indent << "defstr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.defstr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWOPHASE_SOLVER_ROS_MESSAGE_SOLVERREQUEST_H
